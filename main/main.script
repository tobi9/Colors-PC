--The folder that will contain a game data
folder = "Pompayus test"
--The tables below are global tables that hold the information on the colors the player can use.	
color_info_table = nil
unlocked_colors_table = {}
--[[ These variables are used by the level, color ,controller, and color selection system 
scripts they were put in the main script because they need to be immune ro restarting game sessions]]
--[[
	THE tray is the table where the colors chosen are placed in the order in which they were chosen.
	The colors script and the level script both check this tray to get the colors chosen and the adjust the
	game elements.
]]
tray = {}
-- This global variable is to be checked by the pick colors script so the correct number of colors are displayed
num_of_colors_picked = nil
--the variables below are to be used by the level gui script 
color_strings = {}
colors = {}
--there's a bug I'm trying to patch for some reason the NUM_OF_COLOS_PICKED is nil when a game session is restarted
--I've not figured out why this happens but for now a patch will have to do and thats the purpose of the variable below
NumOfColorsPicked = nil
-- commented out the lvl_loaded in the load clr menu
local menuProxy = "#menu_proxy" -- the id of the collection proxy of the menu collection
local levelProxy = "#level_proxy" --(rgb level)the id of the collection proxy of the level collection
local pauseProxy = "#pause_proxy"-- the id of the collection proxy of the pause collection
local gameOverProxy = "#gameover_proxy" -- the id of the collection proxy of the gameover collection
local upgradesProxy = "#upgrades_proxy"
local iapProxy = "#iap_proxy"
local colorMenuProxy = "#color_menu_proxy"
local pickColorsProxy = "#pick_colors_proxy"
local colorSelectorProxy = "#color_selector_proxy"
local customizerProxy = "#customizer_proxy"
local colorOptionsProxy = "#color_options_proxy"
local salesProxy = "#sales_proxy"
local lvl_loaded = false -- this variable makes sure the main input does not take action when another collectionproxy has been loaded
main = "main:/main#main"

local function load_menu()-- loads the menu collection
	if sound_playing == false then
		msg.post("#soundtrack", "play_sound", {delay = 0, gain = 1})
		sound_playing = true
	end
	msg.post(menuProxy, "load")
	lvl_loaded = false -- this returns input control to main.script
	tray = {}
	num_of_colors_picked = nil
	color_strings = {}
	colors = {}
end

local function unload_menu() -- unloads the menu collection
	msg.post(menuProxy, "unload")
end

local function load_color_menu()
	msg.post(colorMenuProxy, "load")
end

local function unload_color_menu()
	msg.post(colorMenuProxy , "unload")
end

local function load_pick_colors()
	msg.post(pickColorsProxy, "load")
end

local function unload_pick_colors()
	msg.post(pickColorsProxy, "unload")
end

local function load_color_selector()
	msg.post( colorSelectorProxy, "load")
end

local function unload_color_selector()
	msg.post( colorSelectorProxy, "unload")
end

local function load_level() -- loads the level collection
	--[[msg.post("#soundtrack", "stop_sound", {delay = 0, gain = 1})
	sound_playing = false]]
	msg.post(levelProxy, "load")
	lvl_loaded = true
end

local function unload_level() -- unloads the level collection
	msg.post(levelProxy, "unload")
	lvl_loaded = false
		--[[After the level collection is unload, the TRAY(which is a global table declared in the color menu script)
	is emptied and the num_of_colors_picked(which is a global variable also declared in the color menu script) is
	set to nil. The reason for this is that there are scripts that use these information and after each level session
	the player chooses new options that are placed in the table and variable]]
	tray = {}
	num_of_colors_picked = nil
end

gamePaused = false
-- gamePaused sets to true if the game is paused
local function pause_game()--pauses the level
	msg.post(pauseProxy, "load")
	msg.post(levelProxy, "disable")
	gamePaused = true
end

local function end_game()--gameover
	msg.post(gameOverProxy, "load")
	msg.post(levelProxy, "disable")
	gamePaused = true
end

local function resume_game(proxy) --resumes the game
	msg.post(proxy, "unload")
	msg.post(levelProxy, "enable")
	gamePaused = false
end

local not_first_time = false -- this condition prevents the level from restarting at the beginning
local restart_col = nil -- the collection that is to be reloaded when the player restarts the level
local function restart_level(proxy) -- restart the level
	msg.post(proxy, "unload")
	msg.post(levelProxy, 'load')
	not_first_time = false
end

local function return_2_menu(proxy) -- goes back to the main menu(pause)
	msg.post(proxy, "unload")
	msg.post(levelProxy, "unload")
	load_menu()
end

local load_customizer = function()
	msg.post(customizerProxy, "load")
	unload_menu()
	lvl_loaded = true
	gamePaused = true -- to is for convinience because the level and this collection share the same window listener function
end

local unload_customizer = function()
	msg.post(customizerProxy, "unload")
	load_menu()
	lvl_loaded = false
	gamePaused = false -- to is for convinience because the level and this collection share the same window listener function
end

local function load_upgrades()
	msg.post(upgradesProxy, "load")
	unload_menu()
	lvl_loaded = true
	gamePaused = true -- to is for convinience because the level and this collection share the same window listener function
end

local function unload_upgrades()
	msg.post(upgradesProxy, "unload")
	load_menu()
	lvl_loaded = false
	gamePaused = false
end

local function load_iap()
	msg.post(iapProxy, "load")
	msg.post(upgradesProxy, "unload")
end

local function unload_iap()
	msg.post(iapProxy, "unload")
	msg.post(upgradesProxy, "load")
end

local function load_color_options()
	msg.post(colorOptionsProxy, "load")
	msg.post(upgradesProxy, "unload")
end

local function unload_color_options()
	msg.post(colorOptionsProxy, "unload")
	msg.post(upgradesProxy, "load")
end

local function load_sales()
	msg.post(upgradesProxy, "unload")
	msg.post(salesProxy, "load")
end

local function unload_sales()
	msg.post(salesProxy, "unload")
	msg.post(upgradesProxy, "load")
end

-- this function pauses the game if event focus is lost
local function window_callback(self, event, data) --gamePaused is declared in the main script
	if event == window.WINDOW_EVENT_FOCUS_LOST and lvl_loaded == true and gamePaused == false then
		msg.post("#", 'pause') -- pause the game
	end
end

function init(self)
	defos.set_maximized(true)
	msg.post("@render:", "use_fixed_fit_projection")
	if sound.is_music_playing() then
		for i, group_hash in ipairs(sound.get_groups()) do
			sound.set_group_gain(group_hash, 0)
		end
	end
	sound.set_group_gain('master', 1)
	--retrieve the colour information
	local file = sys.get_save_file(folder, "color_info_table")
	color_info_table = sys.load(file)
	if #color_info_table == 0 then
		color_info_table = {
			{'red', true, vmath.vector4(1, 0, 0, 1)}, {'lime', true, vmath.vector4(0, 1, 0, 1)},
			{'blue', true, vmath.vector4(0, 0, 1, 1)}, {'magenta', false, vmath.vector4(1, 0, 1, 1)},
			{'white', false, vmath.vector4(1, 1, 1, 1)}, {'green', false, vmath.vector4(0, 128/255, 0/255, 1)},
			{'yellow', false, vmath.vector4(1, 1, 0, 1)}, {'cyan', false, vmath.vector4(0, 1, 1, 1)},
			{'gray', false, vmath.vector4(128/255, 128/255, 128/255, 1)}, {'olive', false, vmath.vector4(128/255, 128/255, 0, 1)},
			{'purple', false, vmath.vector4(128/255, 0, 128/255, 1)}, {'pink', false, vmath.vector4(255/255, 192/255, 203/255, 1)},
			{'orange', false, vmath.vector4(1, 165/255, 0, 1)},{'lemon', false, vmath.vector4(253/255, 1, 0, 1)},
			{'teal', false, vmath.vector4(0,128/255,128/255, 1)}, {'brown', false, vmath.vector4(165/255, 42/255, 42/255, 1)},
			{'crimson', false, vmath.vector4(220/255, 20/255, 60/255, 1)}, {'khaki', false, vmath.vector4(240/255, 230/255, 140/255, 1)},
			{'violet', false, vmath.vector4(238/255, 130/255, 238/255, 1)}, {'beige', false, vmath.vector4(245/255, 245/255, 220/255, 1)},
			{'chocolate', false, vmath.vector4(210/255, 105/255, 30/255, 1)}, {'maroon', false, vmath.vector4(128/255, 0, 0, 1)},
			{'silver', false, vmath.vector4(192/255, 192/255, 192/255, 1)}, {'turqoise', false, vmath.vector4(64/255, 224/255, 208/255, 1)},
			{'ivory', false, vmath.vector4(1, 1, 240/255, 1)}, {'azure', false, vmath.vector4(240/255, 1, 1, 1)},
			{'sienna', false, vmath.vector4(160/255, 82/255, 45/255, 1)}, {'lemon\ngreen', false, vmath.vector4(173/255, 248/255, 2/255, 1)},
			{'lavender', false, vmath.vector4(230/255, 230/255,250/255, 1)}, {'bisque', false, vmath.vector4(1, 228/255, 196/255, 1)},
			{'coral', false, vmath.vector4(1, 127/255, 80/255, 1)}, {'tomato', false, vmath.vector4(1, 99/255, 71/255, 1)},
			{'gold', false, vmath.vector4(1, 215/255, 0, 1)}, {'moccasin', false, vmath.vector4(1, 228/255, 181/255, 1)},
			{'plum', false, vmath.vector4(221/255, 160/255, 221/255, 1)}, {'indigo', false, vmath.vector4(75/255, 0, 130/255, 1)}
		}
	end
	--retrieve the unlocked colors from the color_info_table and put them into the unlocked_colors_table
	for k, v in ipairs(color_info_table) do
		if v[2] == true then
			table.insert(unlocked_colors_table, v)
		end
	end

	msg.post("@system:", "set_update_frequency", { frequency = 100 } ) -- think carefully before touching this
	msg.post("#intro", "play_sound", {delay = 0, gain = 1})
	msg.post(".", "acquire_input_focus")
	msg.post("#intro_proxy", "load")
	--load_menu()
	window.set_listener(window_callback)
end

function final(self)
	msg.post(".", "release_input_focus")
	--save the color_info_table
	local file = sys.get_save_file(folder, "color_info_table")
	sys.save(file, color_info_table)
	--save the default colors
	local file = sys.get_save_file(folder, "default_node_colors")
	local default_clrs = {default_box_clr_info, default_text_clr_info}
	sys.save(file, default_clrs)
end

local ad_caller

function on_message(self, message_id, message, sender)
	--message ids
	local start = hash("start")
	local load_lvl = hash("load_level")
	local unload_intro = hash("unload_intro")
	local msg_upgrades = hash("upgrades")
	local msg_sound = hash("sound")
	local exit = hash("exit")
	local pause = hash('pause')
	local resume = hash('resume')
	local return_to_menu = hash('return_2_menu')
	local gameover = hash('gameover')
	local restart = hash('restart')
	local unload_upgrds = hash("unload_upgrades")
	local load_micro = hash("load_iap")
	local unload_micro = hash("unload_iap")
	local proxy_unloaded = hash("proxy_unloaded")
	local proxy_loaded = hash("proxy_loaded")
	local show_ad = hash("show_ad")
	local ad_completed = hash("ad_completed")
	local unload_clr_menu = hash("unload_color_menu")
	local load_pick_clr = hash("load_pick_colors")
	local unload_pick_clr = hash("unload_pick_colors")
	local load_clr_selector = hash("load_color_selector")
	local unload_clr_selector = hash("unload_color_selector")
	local msg_customizer = hash("customizer")
	local unld_customizer = hash("unload_customizer")
	local load_clr_options = hash("load_color_options")
	local unload_clr_options = hash("unload_color_options")
	local ld_sales = hash("load_sales")
	local unld_sales = hash("unload_sales")
	local msg_click = hash("click")
	local msg_new_clrs = hash("new_colors")

	if message_id == msg_click then
		msg.post("#click", "play_sound", {delay = 0, gain = 1})
	elseif message_id == start then
		load_color_menu()
		unload_menu()
	elseif message_id == load_lvl then
		load_level()
		unload_pick_colors()
	elseif message_id == unload_intro then
		msg.post("#intro_proxy", "unload")
		load_menu()
	elseif message_id == msg_customizer then
		load_customizer()
	elseif message_id == msg_upgrades then
		load_upgrades()
	elseif message_id == msg_sound then
		function handle_sound() -- this is a global function
			local gain = sound.get_group_gain('master')
			if gain == 0 then
				sound.set_group_gain('master', 1)
			else
				sound.set_group_gain('master', 0)
			end
		end
		handle_sound()
	elseif message_id == exit then
		os.exit()
	elseif message_id == pause then -- pause the game
		pause_game()
	elseif message_id == resume then -- resume the game
		local col = nil -- this variable will contain the collection to be unloaded
		if message.col == "pause" then -- this if statement determines which collection to be unloaded
			col = pauseProxy
			resume_game(col)
		else
			col = gameOverProxy
			resume_game(col)
			gamePaused = true
		end
	elseif message_id == return_to_menu then -- return to the main menu
		local col = nil -- this variable will contain the collection to be unloaded
		if message.col == "pause" then -- this if statement determines which collection to be unloaded
			col = pauseProxy
		else
			col = gameOverProxy
		end
		return_2_menu(col)
	elseif message_id == gameover then -- end the game
		end_game()
	elseif message_id == restart then -- this condition modifies the variables that will enable this script to restart the level
		if message.col == "pause" then -- this if statement determines which collection to be unloaded
			restart_col = pauseProxy
		else
			restart_col = gameOverProxy
		end
		not_first_time = true
		unload_level()
	elseif message_id == unld_customizer then
		unload_customizer()
	elseif message_id == unload_upgrds then
		unload_upgrades()
	elseif message_id == load_micro then
		load_iap()
	elseif message_id == unload_micro then
		unload_iap()
	elseif message_id == proxy_unloaded then -- this message is received everytime a proxy is unloaded
		local col = hash('level_proxy')
		if sender.fragment == col and not_first_time == true then -- this confirms if the level collection is not  loading for the first time
			restart_level(restart_col) -- restarts the level
		end
	elseif message_id == proxy_loaded then
		msg.post(sender, "init")
		msg.post(sender, "enable")
	elseif message_id == show_ad then
		ad_caller = sender
		msg.post("main:/ads#ads", "show_ad")
	elseif message_id == ad_completed then
		msg.post(ad_caller, "completed")
	elseif message_id == unload_clr_menu then
		unload_color_menu()
		load_menu()
	elseif message_id == load_pick_clr then
		load_pick_colors()
		unload_color_menu()
	elseif message_id == unload_pick_clr then
		unload_pick_colors()
		load_color_menu()
	elseif message_id == load_clr_selector then
		load_color_selector()
		unload_pick_colors()
	elseif message_id == unload_clr_selector then
		unload_color_selector()
		load_pick_colors()
	elseif message_id == load_clr_options then
		load_color_options()
	elseif message_id == unload_clr_options then
		unload_color_options()
	elseif message_id == ld_sales then
		load_sales()
	elseif message_id == unld_sales then
		unload_sales()
	elseif message_id == msg_new_clrs then
		--There's an error but it works
		return_2_menu(gameOverProxy)
		unload_menu()
		load_color_menu()
	end
end