local Color = require("modules.colors")

local colorFac = '#color_factory' -- this is the game object to be spawned 
local color = nil -- this variable contains the factory of the game object that will b spawned
spawn = nil -- the id of the spawned game object it is also a global variable it is needed by the level gui script
answered = false -- this variable becomes true if the color has given its answer it prevents multiple answers to the same question it is used by the colors.script
level_gui  = "level:/gui#level" -- this is also used by the colors.script
score = 0 -- this is the player's score and it is also a global variable
speed = 1200
brake_score = 0 -- the score when the player used brakes for the first time needed by the level and challenge scripts
chal_passed = false -- true if so and false if not
width = nil --  the width returned by the windows.get_size function
local spawn_x_pos
--ad_prompt_shown = false -- this is a boolean value needed by the colors script to stop the ad prompt seen more than once
local function spawn_color(clr) -- this function spawns the stated game object at the stated position
	local pos = vmath.vector3(spawn_x_pos, 650, 0.1)-- where the game objects are to be spawned
	spawn = factory.create(clr, pos, nil, {}, 0.5) -- the clr is a string and pos is vector3 value. 1 is the scale of the game object 
	msg.post(spawn, "your_color_is", {color = clr}) -- sends the color game object the data it needs to determine what its answer is.
	if speed < 1700 then --1400 is the max speed
		speed = speed + 25
	end
end

function init(self)
	Color.extract_color_info(tray, color_strings, 1) -- this statement extracts the string names of the colors in the TRAY and places them in the global color table
	Color.extract_color_info(tray, colors, 3) -- extracts the vector4 color values
	width = window.get_size()
	spawn_x_pos = -(width/2) - 100
	spawn_color(colorFac) -- spawns the first go of the session
	msg.post(level_gui, "adjust_lives")-- displays the number of lives the player has left
	--msg.post("#background_music", "play_sound", {delay = 0, gain = 1})
	msg.post("main:/main#challenges", "num_of_colors") -- give the challenge script the required info to calculate the actual reward
	--send the color strings to the analyzer
	msg.post(analyzer, "colors", {colors = color_strings})
end

--Color Streak System
local color_streak_table = {}
local word_streak_table = {}
--the scores at the time the streak ended are recorded in the tables below
local color_streak_scores = {}
local word_streak_scores = {}
--Streak Counters
local color1, color2, color3, color4, color5, color6 = 0, 0, 0, 0, 0, 0
local word1, word2, word3, word4, word5, word6 = 0, 0, 0, 0, 0, 0


function final(self)
	gamePaused = false -- the varible is declared in the main script
	chal_passed = false
end

local spawn_counter = 3 -- this counts the number of objects spawned so the hints will stop being displayed after 3 objects have been spawned
local hint
local sender_container
function on_message(self, message_id, message, sender)
	--message ids
	local im_dead = hash("im_dead")
	local answer = hash("answer")
	local new_hints = hash("new_hints")
	local msg_correct = hash("correct")
	local msg_wrong = hash("wrong")
	local msg_gameover = hash("gameover")
	local strks_needed = hash("streaks_needed")

	if message_id == im_dead then
		msg.post(level_gui, "change_question")
		spawn_color(colorFac, spawn_pos)
		answered = false -- allows the player to answer another question
	elseif message_id == answer and spawn_counter > 0 then
		spawn_counter = spawn_counter - 1
		msg.post(level_gui, "show_hint", {hint = message.hint})
	elseif message_id == new_hints then
		spawn_counter = spawn_counter + 3
	elseif message_id == strks_needed then
		sender_container = sender
		local color_streak_table = {color1, color2, color3, color4, color5, color6}
		local word_streak_table = {word1, word2, word3, word4, word5, word6}
		-- although it requests streaks all the info needed by the challenge script to check if a challenge has been passed is sent
		if not chal_passed then
			msg.post("main:/main#challenges", "check_challenge", {word = word_streak_table, color = color_streak_table--[[, word_score = word_streak_scores, color_score = color_streak_scores]]})
		end
	elseif message_id == msg_correct then
		local temp -- this a container that is used to hold numbers from the streak tables
		for k, v in ipairs(color_strings) do
			if message.answer == v then
				if message.type == "color" then
					--increment the streaks
					if k == 1 then
						color1 = color1 + 1
						if color1 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color1})
						end
					elseif k == 2 then
						color2 = color2 + 1
						if color2 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color2})
						end
					elseif k == 3 then
						color3 = color3 + 1
						if color3 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color3})
						end
					elseif k == 4 then
						color4 = color4 + 1
						if color4 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color4})
						end
					elseif k == 5 then
						color5 = color5 + 1
						if color5 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color5})
						end
					elseif k == 6 then
						color6 = color6 + 1	
						if color6 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = color6})
						end
					end
				else
					if k == 1 then
						word1 = word1 + 1
						if word1 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word1})
						end
					elseif k == 2 then
						word2 = word2 + 1
						if word2 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word2})
						end
					elseif k == 3 then
						word3 = word3 + 1
						if word3 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word3})
						end
					elseif k == 4 then
						word4 = word4 + 1
						if word4 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word4})
						end
					elseif k == 5 then
						word5 = word5 + 1
						if word5 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word5})
						end
					elseif k == 6 then
						word6 = word6 + 1
						if word6 >= 3 then
							msg.post(level_gui, "streak", {pointer = k, type = message.type, number = word6})
						end
					end
				end
			end
		end
	end
end