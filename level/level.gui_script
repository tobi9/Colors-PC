local TouchFb = require("modules.animation")

local box_nodes = {"option1", "option2", "option3", "option4", "option5", "option6"}
question = nil -- this is a global variable
ad_for_hints_played = false
local brake_speed
-- options are sent to the colors script
local options = {}
local option_nodes = {} -- this table is need to set the correct colors

local function set_question()
	local top_node = gui.get_node("question")
	local mid_node = gui.get_node("question1")
	if question == "WHAT WORD?" or question == nil then
		question = "WHAT COLOR?"
	else
		question = "WHAT WORD?"
	end
	gui.set_text(top_node, question)
	gui.set_text(mid_node, question)
end

--score was declared in the main script
function init(self)
	--msg.post("@system:", "toggle_profile")
	local q = gui.get_node("question")
	gui.animate(q, "position.y", 980, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
	brake_speed = speed
	set_question()
	msg.post(".", "acquire_input_focus")
	local b_id = gui.get_node("brakes")
	gui.set_text(b_id, tostring(brakes))
	options = color_strings
	local counter = 1
	repeat
		local node = gui.get_node("option"..tostring(counter))
		local text = gui.get_node("color"..tostring(counter))
		gui.set_color(node, colors[counter])
		gui.set_text(text, string.upper(color_strings[counter]))
		table.insert(option_nodes, node)
		counter = counter + 1
	until(counter > NumOfColorsPicked)
	-- the block of code below adjusts the option boxes and texts for aesthetic purposes
	for k, v in ipairs(box_nodes) do
		local node = gui.get_node(v)
		local text = gui.get_node("color"..tostring(k))
		local pos = gui.get_position(node)
		if NumOfColorsPicked > 3 then
			local node = gui.get_node("question1")
			local pos = gui.get_position(node)
			pos.y = 750
			gui.set_position(node, pos)		
		end
		if NumOfColorsPicked == 3 then
			pos.y = 200
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 4 and k == 4 then
			pos.x = 320
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 5 then
			if k == 4 then
				pos.x = 220
			elseif k == 5 then
				pos.x = 440
			end
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		end
		if k > NumOfColorsPicked then
			gui.set_enabled(node, false)
			gui.set_enabled(text, false)
		end
	end
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local col_name = "level" -- this is needed by the customizer to avoid conflicts in memory
	local box_nodes = {"score", 'question', "pause", "_brakes", "brakes"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, --[[default_box_clr_info,]] col_name)
	end

	--set question1 to question's color
	local clr = gui.get_color(gui.get_node("question"))
	clr.w = 0.30 -- set the alpha
	gui.set_color(gui.get_node("question1"), clr)
	gui.set_color(gui.get_node("streaks"), clr)

	initial_highscore = highscore -- the initial highscore is the hichscore at the beginning of the session needed by the gameover and pause scripts check their init functions
	local best_id = gui.get_node('best')
	gui.set_text(best_id, "BEST: "..tostring(highscore))
end

function final(self)
	msg.post("main:/main#challenges", "level_ended", {num_of_clrs = NumOfColorsPicked}) -- give the challenge script the required info to calculate the actual reward
	msg.post(".", "release_input_focus")
end

--touch feedback
local button_tapped = nil
local option_ptr

--local prompt_context -- the reason the prompt is shown. It can only be 'gameover' or 'hints'

local function handle_input()
	if button_tapped == 'option'..tostring(option_ptr) then
		msg.post(spawn, "check_this", {ans_ptr = option_ptr})
	elseif button_tapped == 'pause' then
		msg.post("main:/main#main", "pause")
	elseif button_tapped == 'brakes' and brakes > 0 then
		speed = brake_speed--friction_speed
		brakes = brakes - 1
		brake_score = score
		msg.post("main:/main#data_handler", "save_data")
		msg.post(level_gui, "adjust_brakes")
		msg.post(analyzer, "brake_used")
	end
end

local function touch_feedback(node)
	local pos = gui.get_position(node)
	gui.animate(node, "position.x", pos.x + 20, gui.EASING_INOUTBOUNCE, BUTTON_ANIMATION_DURATION, 0, handle_input, gui.PLAYBACK_ONCE_PINGPONG)
end

--hint the player
local hint_player = function(str)
	local option = gui.get_node(str)
	local pos = gui.get_position(option)
	gui.animate(option, "position.y", pos.y + 10, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
end

local highscore_notification_sent = false -- this stops the level script from notifying the challenge script more than once
function on_message(self, message_id, message, sender)
	-- message ids
	local add_score = hash("add_score")
	local show_hint = hash("show_hint")
	local change_qst = hash("change_question")
	local what_is_the_question = hash("what_is_the_question")
	local msg_pointers = hash("pointers")
	local adj_brakes = hash("adjust_brakes")
	--local msg_show_prompt = hash("show_prompt")
	local msg_completed = hash("completed")
	local msg_strk = hash("streak")

	if message_id == add_score then
		local score_id = gui.get_node("score") -- gets the id of the score node
		score = score + 1  -- increments the score
		local pos = gui.get_position(score_id)
		gui.animate(score_id , "position.x", pos.x + 5, gui.EASING_INBACK, 0.1, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		if score > highscore then
			highscore = score
			local best_id = gui.get_node('best')
			gui.set_text(best_id, "BEST: "..tostring(highscore))		
			if not highscore_notification_sent then
				msg.post("#bounty_success_sound", "play_sound", {delay = 0, gain = 1})
				msg.post("main:/main#challenges", "new_highscore")
				highscore_notification_sent = true
			end
			msg.post("main:/main#data_handler", "save_data")
		end
		gui.set_text(score_id, score)-- this displays the incremented score
		--notify the controller script to supply the challenge script with the data needed to chcl if the challenge has been passed
		msg.post("level:/controller#controller", "streaks_needed")
	elseif message_id == show_hint then
		hint_player('option'..tostring(message.hint))
	elseif message_id == change_qst then
		set_question()
	elseif message_id == what_is_the_question then
		msg.post(sender, "the_question_is", {q = questionPtr})
	elseif message_id == adj_brakes then
		local b_id = gui.get_node("brakes")
		gui.set_text(b_id, brakes)
	elseif message_id == msg_strk then
		local node = gui.get_node("streaks")
		gui.set_text(node, message.number.."X ".." "..string.upper(message.type).." STREAK FOR "..string.upper(color_strings[message.pointer]))
		local callback = function()
			gui.set_text(node, question)
		end
		timer.delay(1, false, callback)
	end
end

local touch = hash("touch")
local back = hash("back")

function on_input(self, action_id, action)
	if action_id == touch and action.released then
		--if is_prompt_active == false then
			local pause = gui.get_node("pause")
			local _frictions = gui.get_node("_brakes")
			if gui.pick_node(pause, action.x, action.y) then
				button_tapped = 'pause'
				TouchFb.touch_feedback(pause, handle_input)
			elseif gui.pick_node(_frictions, action.x, action.y) then
				button_tapped = 'brakes'
				TouchFb.touch_feedback(_frictions, handle_input)
			end
			for k, v in ipairs(box_nodes) do
				local node = gui.get_node(v)
				if gui.pick_node(node, action.x, action.y) then
					button_tapped = v
					option_ptr = k
					TouchFb.touch_feedback(node, handle_input)
					return
				end
			end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		button_tapped = 'pause'
		handle_input()
	end
end