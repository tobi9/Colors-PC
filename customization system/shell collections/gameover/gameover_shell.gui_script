local Customizer = require("modules.customizer")
local TouchFb = require("modules.animation")
local col_name = "gameover" -- this is needed by the customizer to avoid conflicts in memory

-- the tables below are needed to revert the changes made
local node_strings = {"title", "_board", "_resume", "_restart", "_sound", "_show_ad", "_menu"}
local node_colors = {}
local ledger = {} -- each element in this table is a table {node, clr}. clr is the color node was before it was changed

function init(self)
	msg.post("main:/main#challenges", "shell")
	--take a snapshot of the unaltered state of the collection
	Customizer.take_snapshot(node_strings, node_colors)
	-- node each node to its appropriate color
	for k, v in ipairs(node_strings) do
		Customizer.set_node_color(v, col_name)
	end
	--canvas customization
	local canvas = {"prompt", "_clear_all", "_set_all", "_undo", "_ok"}
	for k, v in ipairs(canvas) do
		Customizer.set_node_color(v, "canvas")
	end

	msg.post(".", "acquire_input_focus")
	msg.post(customizer_controller, "active_shell", {collection = col_name})
	--update the currency info
	local m = gui.get_node("money")
	gui.set_text(m, "$"..tostring(money))
	local b = gui.get_node("brakes")
	gui.set_text(b, "BRAKES\n"..tostring(brakes))
	local l = gui.get_node("lives")
	gui.set_text(l, "LIVES\n"..tostring(lives))
	local c = gui.get_node("coins")
	gui.set_text(c, "COINS\n"..tostring(coins))	
	local best_id = gui.get_node('best')
	gui.set_text(best_id, "BEST\n"..tostring(highscore))

	if mode == "light" then
		local node = gui.get_node("ad_text")
		gui.set_text(node, "DARK\nMODE")
	else
		local node = gui.get_node("ad_text")
		gui.set_text(node, "LIGHT\nMODE")
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

color_chosen = nil
--the two variables below are global so their values aren't lost when the collection is unloaded for the palette
node_holder = nil-- this is a global variable. It holds the node to be changed in memory until the color is chosen
node_name = nil -- I could have used chosen node but too lazy
local chosen_node
local change_all = false -- this variable is set to true when the players clicks the set all button
function on_message(self, message_id, message, sender)
	local enabled = hash("enabled")
	local chal = hash("challenge")

	if message_id == enabled then
		if color_chosen ~= nil and #color_chosen > 0 and change_all == false then
			Customizer.record_change(node_holder, ledger)
			Customizer.set_new_node_color(node_holder, node_name, color_chosen, col_name)
		else
			-- This sets all the nodes to a particular color
			local node_holder
			if color_chosen ~= nil then
				for k, v in ipairs(node_strings) do
					--this is because of the title. As not to mix up the box with the text
					node_holder = gui.get_node(v)
					Customizer.record_change(node_holder, ledger)
					Customizer.set_new_node_color(node_holder, node_name, color_chosen, col_name)
				end
			end
		end
	elseif message_id == chal then
		gui.set_text(gui.get_node("challenge"), message.chal)
	end
	change_all = false -- reset to avoid repetition
end

local button_tapped
local handle_input = function()
	if button_tapped == "_ok" then
		msg.post(customizer_controller, "unload_gameover_shell")
	elseif button_tapped == "_undo" then
		Customizer.undo_change(ledger)
	elseif button_tapped == "_clear_all" then
		Customizer.clear_changes(node_strings, node_colors)
	elseif button_tapped == "_set_all" then
		change_all = true
		msg.post(customizer_controller, "load_palette", {collection = col_name})
	else
		for k, v in ipairs(node_strings) do
			if button_tapped == v then
					chosen_node = v
					node_name = v
					node_holder = gui.get_node(chosen_node)
					msg.post(customizer_controller, "load_palette", {collection = col_name})
				break 
			end
		end
	end
	button_tapped = nil
end

function on_input(self, action_id, action)
	local touch = hash("touch") -- touch_id
	local back = hash("back")
	if action_id == touch and action.released then
		local buttons = {"_title", "_board", "_resume", "_restart", "_sound", "_show_ad", "_menu", "_clear_all",
		 "_set_all", "_undo", "_ok"}
		for k, v in ipairs(buttons) do
			local node = gui.get_node(v)
			if gui.pick_node(node, action.x, action.y) then
				button_tapped = v
					if k > 1 then
						TouchFb.touch_feedback(node, handle_input)
					else
						button_tapped = "title"
						node = gui.get_node("title")
						TouchFb.touch_feedback(node, handle_input)
					end
				break
			end
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		button_tapped = "_ok"
		handle_input()
	end
end